name: Sync PLAN Data

on:
  schedule:
    # Run every 30 minutes for near real-time updates
    - cron: '*/30 * * * *'
  workflow_dispatch: # Allow manual trigger
    inputs:
      force_sync:
        description: 'Force sync even if no changes'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write  # Allow the action to write to the repository

jobs:
  sync-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'scripts/package-lock.json'
    
    - name: Install script dependencies
      run: |
        cd scripts
        npm ci
    
    - name: Download and sync PLAN database
      env:
        GGSERVERS_HOST: ${{ secrets.GGSERVERS_HOST }}
        GGSERVERS_USERNAME: ${{ secrets.GGSERVERS_USERNAME }}
        GGSERVERS_PASSWORD: ${{ secrets.GGSERVERS_PASSWORD }}
        GGSERVERS_PORT: ${{ secrets.GGSERVERS_PORT }}
      run: |
        cd scripts
        echo "üöÄ Starting PLAN data sync..."
        
        # Create temp directory
        mkdir -p temp
        
        # Run the sync script
        npm run sync
    
    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet public/data/leaderboards.json; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "üìä No changes detected in leaderboard data"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "üîÑ Changes detected in leaderboard data"
          
          # Show what changed
          echo "üìù Changes summary:"
          git diff --stat public/data/leaderboards.json || true
        fi
    
    - name: Validate JSON data
      if: steps.changes.outputs.changes == 'true' || github.event.inputs.force_sync == 'true'
      run: |
        echo "üîç Validating generated JSON..."
        if ! python3 -m json.tool public/data/leaderboards.json > /dev/null; then
          echo "‚ùå Invalid JSON generated"
          exit 1
        fi
        echo "‚úÖ JSON validation passed"
        
        # Show data statistics
        echo "üìä Leaderboard statistics:"
        node -e "
          const data = JSON.parse(require('fs').readFileSync('public/data/leaderboards.json', 'utf8'));
          console.log('  - Most Active:', data.mostActive.length, 'players');
          console.log('  - Top Killers:', data.topKillers.length, 'players');
          console.log('  - Longest Sessions:', data.longestSessions.length, 'players');
          console.log('  - Top Builders:', data.topBuilders.length, 'players');
          console.log('  - Last Updated:', data.lastUpdated);
        "
    
    - name: Commit and push changes
      if: steps.changes.outputs.changes == 'true' || github.event.inputs.force_sync == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - PLAN Sync"
        
        # Configure git to use the token for authentication
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        
        git add public/data/leaderboards.json
        
        # Create detailed commit message
        commit_message="ü§ñ Update leaderboard data - $(date '+%Y-%m-%d %H:%M:%S UTC')

        üìä Data sync completed:
        $(node -e "
          try {
            const data = JSON.parse(require('fs').readFileSync('public/data/leaderboards.json', 'utf8'));
            console.log('- Most Active: ' + data.mostActive.length + ' players');
            console.log('- Top Killers: ' + data.topKillers.length + ' players');
            console.log('- Longest Sessions: ' + data.longestSessions.length + ' players');
            console.log('- Top Builders: ' + data.topBuilders.length + ' players');
            if (data.mostActive[0]) console.log('- Top Player: ' + data.mostActive[0].name + ' (' + Math.round(data.mostActive[0].playtime/3600000) + 'h playtime)');
          } catch(e) { console.log('- Error reading stats'); }
        ")
        
        ‚ö° Auto-generated by GitHub Actions"
        
        git commit -m "$commit_message"
        git push
        
        echo "‚úÖ Changes committed and pushed"
    
    - name: Cleanup temporary files
      if: always()
      run: |
        rm -rf scripts/temp
        echo "üßπ Cleanup completed"
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå PLAN data sync failed!"
        echo "Check the logs above for details."
        echo "Common issues:"
        echo "1. GGServers connection problems"
        echo "2. Invalid credentials"
        echo "3. PLAN database not found or corrupted"
        echo "4. Network connectivity issues"